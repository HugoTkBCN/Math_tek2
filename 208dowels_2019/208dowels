#!/usr/bin/python3

import math
import sys
import argparse

fit = ['P > 99%', '90% < P < 99%', '80% < P < 90%', '70% < P < 80%', '60% < P < 70%', '50% < P < 60%', '40% < P < 50%', '30% < P < 40%', '20% < P < 30%',
       '10% < P < 20%', '5% < P < 10%', '2% < P < 5%', '1% < P < 2%', 'P < 1%']

distribution_table = [[0.00, 0.02, 0.06, 0.15, 0.27, 0.45, 0.71, 1.07, 1.64, 2.71, 3.84, 5.41, 6.63],
               [0.02, 0.21, 0.45, 0.71, 1.02, 1.39, 1.83, 2.41, 3.22, 4.61, 5.99, 7.82, 9.21],
               [0.11, 0.58, 1.01, 1.42, 1.87, 2.37, 2.95, 3.66, 4.64, 6.25, 7.81, 9.84, 11.35],
               [0.30, 1.06, 1.65, 2.19, 2.75, 3.36, 4.04, 4.88, 5.99, 7.78, 9.49, 11.67, 13.28],
               [0.55, 1.61, 2.34, 3.00, 3.66, 4.35, 5.13, 6.06, 7.29, 9.24, 11.07, 13.33, 15.01],
               [0.70, 2.20, 3.07, 3.83, 4.57, 5.35, 6.21, 7.23, 8.56, 10.64, 12.59, 15.03, 16.81],
               [1.24, 2.83, 3.82, 4.67, 5.49, 6.35, 7.28, 8.38, 9.80, 12.02, 14.07, 16.62, 18.48],
               [1.65, 3.49, 4.59, 5.53, 6.42, 7.34, 8.35, 9.52, 11.03, 13.36, 15.51, 18.17, 20.09],
               [2.09, 4.17, 5.38, 6.39, 7.36, 8.34, 9.41, 10.66, 12.24, 14.68, 16.92, 19.63, 21.67],
               [2.56, 4.87, 6.18, 7.27, 8.30, 9.34, 10.47, 11.78, 13.44, 15.99, 18.31, 21.16, 23.21]]

def print_help():
    print('USAGE')
    print('    ./208dowels O0 O1 O2 O3 O4 O5 O6 O7 O8\n')
    print('DESCRIPTION')
    print('    Oi    size of the observed index_columnass')
    if (len(sys.argv) == 2 and sys.argv[1] == "-h"):
        exit(0)
    else:
        exit(84)

def parse_args():
    try:
        if (len(sys.argv) == 10) :
            tab_arg = []
            for i in range (1, 10):
                tab_arg.append(int(sys.argv[i]))
            sum = 0
            for arg in tab_arg:
                sum += arg
                if arg < 0:
                    print("Arguments must be positive")
                    exit(84)
            if sum != 100:
                print("The sum of the arguments must be 100")
                exit(84)
            return (tab_arg)
        else:
            print_help()
    except:
        sys.exit(84)

def get_period(tab):
    res = 0
    for i in range (0, len(tab)):
        res += i * tab[i]
    return (res / 10000)

def get_tx(p):
    tx = []
    for i in range (0, 8):
        tx.append(100 * binomial(100, i, p))
    tx.append(100 - sum(tx))
    return (tx)

def binomial(n, k, p):
    coeff_bin = math.factorial(n) / (math.factorial(k) * math.factorial(n - k))
    return (coeff_bin * math.pow(p, k) * math.pow(1 - p, n - k))

def join_columns(index_columns, i, Ox):
    sum_prev_col = sum([Ox[y] for y in index_columns[i - 1]])
    if (i+1 < len(index_columns)) :
        sum_next_col = sum(Ox[y] for y in index_columns[i + 1])
        if ((i + 1 == len(index_columns)) or (i > 0 and sum_prev_col < sum_next_col)):
            index_columns[i - 1] += index_columns[i]
            del index_columns[i]
            i -= 1
        else:
            index_columns[i] += index_columns[i + 1]
            del index_columns[i + 1]
    else:
        sum_next_col = sum(Ox[y] for y in index_columns[i])
        index_columns[i] += index_columns[i - 1]
        index_columns[i].sort()
        del index_columns[i - 1]
    return (index_columns, i)

def get_index_columns(Ox, tx):
    index_columns = [[i] for i in range(9)]
    i = 0
    while (i < len(index_columns)):
        tmp = sum([Ox[y] for y in index_columns[i]])
        if (tmp >= 10):
            i += 1
        else:
            index_columns, i = join_columns(index_columns, i, Ox)
    return (index_columns)

def get_chi_squared(Ox, tx, c):
    result = 0
    for index_column in c:
        sup = 0
        div = 0
        for i in index_column:
            sup += Ox[i] - tx[i]
            div += tx[i]
        result += math.pow(sup, 2) / div
    return (result)

def get_values(): #c = index Column / d = Chi-squared / p = Distribution / v = degrees of freedom
    Ox = parse_args()
    p = get_period(Ox)
    
    tx = get_tx(p)

    c = get_index_columns(Ox, tx)
    d = get_chi_squared(Ox, tx, c)

    v = len(c) - 2
    if v < 1:
        sys.exit(84)
    return (Ox, p, tx, c, d, v)

def get_column(index_column, Ox, tx):
    index = '%d' % index_column[0]
    val_ox = '%d' % sum([Ox[i] for i in index_column])
    val_tx = '%.1f' % sum([tx[i] for i in index_column])
    column = [index, val_ox, val_tx]
    if len(index_column) > 1 or index_column[0] == 8:
        if (index_column[-1] != 8):
            column[0] += ('-%d' % index_column[-1])
        else:
            column[0] += '+'
    return (column)

def add_column(tab_to_print, column):
    for i, row in enumerate(column):
        tab_to_print[i].append(row)
    return (tab_to_print)

def get_tab_to_print(Ox, tx, c):
    tab_to_print = [[' x'], ['Ox'], ['Tx']]
    for index_column in c:
        column = get_column(index_column, Ox, tx)
        tab_to_print = add_column(tab_to_print, column)
    tab_to_print = add_column(tab_to_print, ['Total', '100', '100'])
    return (tab_to_print)

def get_fit(v, d):
    for i, var in enumerate(distribution_table[v - 1]):
        if (d < var):
            return (i)
    return (-1)

def print_tab(tab_to_print):
    for row in tab_to_print:
        print("  ", end="")
        i = 0
        for column in row:
            if (i < len(row) - 1):
                print(column, end="\t| ")
            else:
                print(column)
            i += 1

def print_all(tab_to_print, p, d, v):
    print_tab(tab_to_print)
    print('Distribution:\t\tB(100, %.4f)' % p)
    print('Chi-squared:\t\t%.3f' % d)
    print('Degrees of freedom:\t%d' % v)
    print('Fit validity:\t\t%s' % fit[get_fit(v, d)])

def main():
    Ox, p, tx, c, d, v = get_values()
    tab_to_print = get_tab_to_print(Ox, tx, c)

    print_all(tab_to_print, p, d, v)
    return (0)

sys.exit(main())